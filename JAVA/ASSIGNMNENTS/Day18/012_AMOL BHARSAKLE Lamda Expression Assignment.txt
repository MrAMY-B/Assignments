##################################################################
Author: 		AMOL BHARSAKLE
Date of creation:	15/06/2021
Topic:	  		Lamda Expression Assignment
Language Used:		JAVA
##################################################################

/*--------------------------1-------------------------------------------------------
 1) define a functional interface "First" with an abstract method "void disp1()" ,
  default method "void disp2()" and a static method "void disp3()"
  inside main function using lambda expression invoke "disp1()" and "disp2()" methods.
also invoke "disp3()" method inside main.
 */
package java8;

public class LamdaAssignemnts {

	public static void main(String[] args) {
	
		First first = new First(){ public void disp1(){ System.out.println("Implemented method disp1 of First "); } };
		first.disp1(); 
		first.disp2();
		First.disp3();

	}
}
interface First{ 
	void disp1(); 
	
	default void disp2(){ 
		System.out.println("Default method disp1 of First");
	}
	
	static void disp3(){
		System.out.println("Static method disp2 of First");
	}
}
/*--------------------------2-------------------------------------------------------
2) define a functional interface "Second" with an abstract method "void disp4()".
define a class Demo with main function.
inside main function create two implementations of "Second" using lambda expression and display their names.
*/
package java8;

public class LamdaAssignemnts {

	public static void main(String[] args) {
		Second s1= new Second(){ public void disp4(){ System.out.println("1-Implementation class method disp4 of interface Second");}};
		s1.disp4();
		Second s2=new Second(){ public void disp4(){ System.out.println("2-Implementation class method disp4 of interface Second");}};
		s2.disp4();
	}
}
interface Second{ void disp4(); }


/*--------------------------3-------------------------------------------------------
3) define a functional interface "MyInterface" with an abstract method "void fun()"
define a class Demo with two functions "static void perform" and main.
from main function pass lambda expression, collect it in "perform" method and invoke "fun()" function.
*/
package java8;

public class LamdaAssignemnts {

	public static void perform(MyInterface myInterface) {
		myInterface.fun();
	}
	public static void main(String[] args) {
		
		MyInterface myinterface = ()->{ System.out.println("Implemented method fun of MyInterface  "); };
		perform(myinterface);
	}
}
interface MyInterface { void fun(); }
 
/*--------------------------4-------------------------------------------------------
4) define a functional interface "Calculator" with an abstract method "int multiply(int a,int b)"
define a class "CalcDemo" with main method.
inside main using lambda create an implementation of "Calculator" , invoke "multiply()" method and display its result.
 */

package java8;

import java.util.Scanner;

public class LamdaAssignemnts {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Calculator calc=(a,b)->{return a*b;};
		System.out.println("Enter two number greater then zero");
		System.out.println("Multiplication is : "+calc.multiply(sc.nextInt(), sc.nextInt()));
		
		sc.close();
	}
}
interface Calculator{ int multiply(int a,int b); }



/*--------------------------5-------------------------------------------------------
5) define a class "Display" with "void disp" method. inside this method display values from 1 to 10.

create an implementation of "Runnable" using lambda expression which will invoke "disp()" method of "Display" class.

create 2 threads and pass above created "Runnable" implementation to these threads.
make sure while one thread is executing other thread will not interfere.
 */
package java8;

import java.util.Scanner;

public class LamdaAssignemnts {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
	
		Runnable runn=()->{new Display().disp();};
		
		Thread th1=new Thread(runn,"First");
		Thread th2=new Thread(runn,"Second");
		th1.start();
		th2.start();
		
		sc.close();
	}
}

class Display{ 
	
	void disp(){
		synchronized(this) {
			for (int i = 1; i <= 10; i++) {
				System.out.println(Thread.currentThread().getName()+" : "+i);
			}
		}
	}
}