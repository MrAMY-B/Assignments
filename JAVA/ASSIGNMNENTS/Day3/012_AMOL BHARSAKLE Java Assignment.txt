##################################################################
Author: 		AMOL BHARSAKLE
Date of creation:	28/05/2021
Topic:	  		Day3
Language Used:		JAVA
##################################################################
//--------------------------------------------------------------------
1) initialize a single dimension array and sort it in ascending order.
//--------------------------------------------------------------------
package day3;

public class Array {

	public static void main(String[] args) {
		
		int arr[] = new int[] {3,5,9,6,4,7,48,5,3,8,23};
		
		for(int i=0;i<arr.length-1;i++) {
			for(int j=i+1;j<arr.length;j++) {
				if(arr[i]>arr[j]) {
					int temp=arr[i];
				arr[i]=arr[j];
				arr[j]=temp;
				}
			}
		}
		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
	}
}

//------------------------------------------------------------------
2) create a class "DemoArr",with the function "disp". 
create 4 objects of this class in an array.
Traverse the array and invoke "disp" on each objects.
//------------------------------------------------------------------

package day3;

public class DemoArr {

	public static void main(String[] args) {
		
		Demo demo[]=new Demo[3];
		for (int i = 0; i < demo.length; i++) {
			demo[i]=new Demo(); 
		}
		for (int j = 0; j < demo.length; j++) {
			demo[j].display("demo"+j);
		}
		

	}

}
class Demo{
	int num;
	
	void display( String str) {
		System.out.println(" Demo object : "+str);
	}
	
}

//------------------------------------------------------------------------------
3)create a class "Shape" with 2 attributes, "width" and "height". 
Make sure one can not access these attributes directly.
provide accessor methods on these attributes and allow them to call from outside of your class.
//------------------------------------------------------------------------------

package day3;

public class ShapeDemo {

	public static void main(String[] args) {

		Shape shape = new Shape();
		shape.setHeight(25);
		shape.setWidth(20);
		
		System.out.println("Total Are is : "+shape.getHeight()*shape.getWidth());

	}

}

class Shape{
	
	private int height;
	private int width;
	/**
	 * @return the height
	 */
	public int getHeight() {
		return height;
	}
	/**
	 * @param height the height to set
	 */
	public void setHeight(int height) {
		this.height = height;
	}
	/**
	 * @return the width
	 */
	public int getWidth() {
		return width;
	}
	/**
	 * @param width the width to set
	 */
	public void setWidth(int width) {
		this.width = width;
	}
	@Override
	public String toString() {
		return "Shape [height=" + height + ", width=" + width + "]";
	}
		
}

//------------------------------------------------------------------------------

4) Define a class "MyClass" and make sure clients can instantiate it , 
a) without any argument
b) with one int argument
c) with two int arguments

//------------------------------------------------------------------------------

package day3;

public class CostructorDemo {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MyClass mc1=new MyClass();
		MyClass mc2=new MyClass(10);
		MyClass mc3=new MyClass(10,20);

	}

} 

class MyClass{
	
	int a;
	int b;
	
	public MyClass() {
		System.out.println("No Args Constructor Called");
	}
	MyClass(int a){
		this.a=a;
		System.out.println("Single Args Constructor called");
	}
	MyClass(int a,int b){
		this.a=a;
		this.b=b;
		System.out.println("Double Argument constructor called");
	}
	
}

//---------------------------------------------------------------------------
5) Define a class "Emp" with private static member "int cnt".
How will u make sure that outsiders can read the value of cnt ?
//---------------------------------------------------------------------------
package day3;

public class StaticDemo {

	public static void main(String[] args) {
		System.out.println("Static varible CNT : "+Emp.cnt);

	}

}

class Emp{
	public static int cnt=29;
}

//---------------------------------------------------------------------

6) Define a class "DemoOb". 
create an instance of it.
now create a reference and assign the reference created in the above statement.
	Discuss what happens?
Now since u have 2 references, take one of the reference and assign a new instance of the class.
	Discuss what happens?
(For ur discussion, write necessary comments in the program)

//---------------------------------------------------------------------

package day3;

public class CopyDemo {

	public static void main(String[] args) {
		//Create object 1
		DemoOb db1=new DemoOb();
		//Created a ref
		DemoOb db2;
		//Assigning 1st object to this newely created ref;
		db2=db1;
		//Assigning new instance to old ref
		db1=new DemoOb();

	}

}

class DemoOb{
	
}

//------------------------------------------------------------------------------------

7) Define 3 classes A , B and C
in all these classes create static and nonstatic variables as well as methods.
Now Define a class "Demo" ,in which define "main" function. 
From this main function try to access all the members of A ,B  and C.

//------------------------------------------------------------------------------------

package day3;

public class NonStatic {

	public static void main(String[] args) {

		A a=new A();
		a.nons=10;
		System.out.println("Membets of class A [ nons:"+a.nons+", stc:"+A.stc+" ]");
		B b=new B();
		b.nons=10;
		System.out.println("Membets of class A [ nons:"+b.nons+", stc:"+B.stc+" ]");
		C c=new C();
		c.nons=10;
		System.out.println("Membets of class A [ nons:"+c.nons+", stc:"+C.stc+" ]");
		
	}
}

class A{
	int nons;
	static int stc=10;
	public void disp( ) {
		System.out.println("Display Method A");
	}
}
class B{
	int nons;
	static int stc=10;
	public void disp( ) {
		System.out.println("Display Method B");
	}
}
class C{
	int nons;
	static int stc=10;
	public void disp( ) {
		System.out.println("Display Method C");
	}
}

//-------------------------------------------------------------------------
8) define static initializers in the above A,B and C classes and check the order of their execution.
//-------------------------------------------------------------------------

package day3;

public class StaticInitializer {
	public static void main(String args[]) {
		
		CC c=new CC();
		BB b=new BB();
		AA a=new AA();
		a.nons=10;
		System.out.println("Membets of class A [ nons:"+a.nons+", stc:"+AA.stc+" ]");
	
		b.nons=10;
		System.out.println("Membets of class A [ nons:"+b.nons+", stc:"+BB.stc+" ]");
		
		c.nons=10;
		System.out.println("Membets of class A [ nons:"+c.nons+", stc:"+CC.stc+" ]");
		

	}

}

class AA{
	int nons;
	static int stc;
	
	static { stc=33; System.out.println("Static initializer of AA"); }
	
	public void disp( ) {
		System.out.println("Display Method A");
	}
}
class BB{
	int nons;
	static int stc;

	static { stc=44; System.out.println("Static initializer of BB"); }
	
	
	public void disp( ) {
		System.out.println("Display  Method B");
	}
}
class CC{
	int nons;
	static int stc;

	static { stc=55; System.out.println("Static initializer of CC"); }
	
	
	public void disp( ) {
		System.out.println("Display Method C");
	}
}













