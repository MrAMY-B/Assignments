##################################################################
Author: 		AMOL BHARSAKLE
Date of creation:	31/05/2021
Topic:	  		Day5 Assignment
Language Used:		JAVA
##################################################################
/*
1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.
			Also show, if needed how will u invoke parent class constructor from child class ?
*/
package day4;

public class Amol {

	public static void main(String[] args) {
		
		System.out.println("-------------- Making obj using no args -----------");
		Sub2 sub2=new Sub2();
		System.out.println("--------------- Making obj passing args --------------");
		Sub2 sub22=new Sub2(15);
		
	}
}

class Base1{
	public Base1() { System.out.println("Base1 No-Arg Constructore called"); }
	public Base1(int num) {System.out.println("Base1 Arg Constructore called");}
}
class Sub1 extends Base1{
	public Sub1() { System.out.println("Sub1 No-Arg Constructore called");}
	public Sub1(int num) { super(num); System.out.println("Sub1 Arg Constructore called");}
}
class Sub2 extends Sub1{
	public Sub2() { System.out.println("Sub1 No-Arg Constructore called"); }
	public Sub2(int num) { super(num); System.out.println("Sub1 Arg Constructore called"); }
}
-------------------------------------------------------------------------------------------------------------

/*
2) create a class "Vehicle", define a method "public void start()" in it. 
	From this class derive a class FourWheeler. 
	How will u override "start()" method of parent class ?
*/
package day4;


public class Vehicle {

	public static void main(String[] args) {
		
		Vehicle1 vcl = new FourWheeler();
		vcl.start();
	}
}

class Vehicle1{
	
	public Vehicle1() {
		System.out.println("Vehicle constructor");
	}
	
	public void start() { System.out.println("-----------Started by Vehicle"); }
}
class FourWheeler extends Vehicle1{
	
	public FourWheeler() {
		System.out.println("FourWheeler Constructor");
	}
	
	public void start() {
			System.out.println("---------------Started by Fourwheeler");
	}
}
------------------------------------------------------------------------------------------------
/* 3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation. */

package day4;

public class Hirarchichal {

	public static void main(String[] args) {
		System.out.println("---------------");
		new A();
		System.out.println("---------------");
		new B();
		System.out.println("---------------");
		new C();
		System.out.println("---------------");
	}
}

class BaseH{
	public BaseH() {
		System.out.println("BaseH invoked");
	}
}
class A extends BaseH{
	public A() {
		System.out.println("in A");
	}
}
class B extends BaseH{
	public B() {
		System.out.println("in B");
	}
}
class C extends BaseH{
	public C() {
		System.out.println("in C"); }
}

-------------------------------------------------------------------------------------------------------------
/*4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.*/

package day4;

public class DynamicPolymorphism {
		
	public static void perform(Top1 ref) {
		ref.disp1(); //polymorphic invocation
	}
	
	public static void main(String[] args) {
		
		perform(new Bottom3());
		perform(new Bottom3());
		perform(new Bottom3());
		
	}
}

class Top1{
	public void disp1() {
		System.out.println("Top1 Disp method called");
	}
}
class Bottom1 extends Top1{
	public void disp1() {
		System.out.println("Bottom1 disp1 Method called");
	}
}
class Bottom2 extends Top1{
	public void disp1() {
		System.out.println("Bottom2 disp1 Method called");
	}
}
class Bottom3 extends Top1{
	public void disp1() {
		System.out.println("Bottom3 disp1 Method called");
	}
}
----------------------------------------------------------------------------------------------------
/* 5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function. */

package day4;

public class DrowingArray {

	public static void main(String[] args) {
		System.out.println("----------Created Array of Shape-------------");
		Shape shape[]= {new Circle(),new Polygon(),new Triangle()};
		System.out.println("-------++++ Calling Drow ++++-------------");
		for (int i = 0; i < shape.length; i++) {
			shape[i].drow();
		}

	}

}

abstract class Shape{ abstract public void drow(); } 

class Triangle extends Shape{
	public void drow() {
		System.out.println("Drowing triangle");
	}
}
class Polygon extends Shape{
	public void drow() {
		System.out.println("Drowing Polygon");
	}
}
class Circle extends Shape{
	public void drow() {
		System.out.println("Drowing Circle");
	}
}

-------------------------------------------------------------------------------------------------
/*6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.
*/
package day4;

public class InterfaceB {

	public static void main(String[] args) {
		System.out.println("----------------------------");
		System.out.println("Calling using ref of CC");
		CC c= new CC();
		c.disp1();
		c.disp2();
		System.out.println("----------------------------");
		System.out.println("Calling using ref of AA");
		AA obj1 = new CC();
		obj1.disp1();
		System.out.println("----------------------------");
		System.out.println("Calling using ref of BB");
		BB obj2 = new CC();
		obj2.disp1();
		obj2.disp2();
		
	}
}
interface AA{
	public void disp1();
}
interface BB extends AA{
	public void disp2();
}
class CC implements BB{
	public void disp2() {
		System.out.println("Calling class CC disp2");
	}
	public void disp1() {
		System.out.println("Calling class CC disp1");
	}
}

----------------------------------------------------------------------------------------------------------
/* 7) Define class "Parent1" with some data.
Define interface "Parent2" with some data.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members. */
package day4;

public class ParentChild {

	public static void main(String[] args) {
		
		
		Parent1 ch1=new Child();
		ch1.parentid=11;
		ch1.someTextPass="password";
		System.out.println("Using reference of Parent1 class");
		System.out.println("-----parentid:"+ch1.parentid+", Password:"+ch1.someTextPass);
		
		Parent2 ch2=new Child();
		// ch2.num=5; ch2.someText="Happy"        Cannot change finals provided by interface
		System.out.println("Using reference of Parent2 Interface");
		System.out.println("-----num:"+ch2.num+", SomeText:"+ch2.someText);
		
		Child ch = new Child();
		ch.parentid=12; ch.someTextPass="Hello";
		System.out.println("Using reference of Child Interface");
		System.out.println("-----Parent id:"+ch.parentid+", SomeTextPass:"+ch.someTextPass+", num:"+ch.num+", SomeText:"+ch.someText);

	}
}

class Parent1{
	public int parentid;
	public String someTextPass;
}
interface Parent2{
	public static final int num = 25;
	public static final String someText = "Happy Family ";
}
class Child extends Parent1 implements Parent2{
}
-------------------------------------------------------------------------------------------------------------------------
/* 
8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors. */

package day4;

public class SubBase {

	public static void main(String[] args) {
		System.out.println("Intantiating SUB11 usnig non args Constructor");
		Sub11 sb1=new Sub11();
		System.out.println("Intantiating SUB11 usnig 1 args non args Constructor");
		Sub11 sb2=new Sub11(10);
		System.out.println("Intantiating SUB11 usnig 2 args non args Constructor");
		Sub11 sb3=new Sub11(10, 20);

	}

}

class Base11{
	public Base11(int num) { System.out.println("------Base argument"); }
}
class Sub11 extends Base11{
	public Sub11() {
		super(10);
		System.out.println("------Sub argument"); 
	}
	public Sub11(int num) {
		super(10);
		System.out.println("------Sub 1 argument");
	}
	public Sub11(int num,int num2) {
		super(10);
		System.out.println("------Sub 2 argument");
	}
}
---------------------------------------------------------------------------------------------------
/*  9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.
inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.  */

package day4;

public class GamePlay {

	public static void perform(Game game) {
		game.play();
	}
	public static void main(String[] args) {

		perform(new Tennis());
		perform(new Football());
		perform(new Cricket());
	}
}

interface Game{
	public void play();
}
class Cricket implements Game{
	public void play() { System.out.println("Playig Cricket"); }
}
class Football implements Game{
	public void play() { System.out.println("Playig Football"); }
}
class Tennis implements Game{
	public void play() { System.out.println("Playig Tennis"); }
}

























