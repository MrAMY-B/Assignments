##################################################################
Author: 		AMOL BHARSAKLE
Date of
creation:		27/05/2021
Topic:	  		Day2
Language Used:		JAVA
##################################################################

1)create a class "Shape" with 2 attributes, "width" and "height". Make sure one can not access these attributes directly.
provide accessor methods on these attributes and allow them to call from outside of your class.

class Shape{
	private int width;
	private int height;
	
	public void setWidth(int width){
		this.width=width;	
	}
	public int getWidth(){
		return width;
	}
	public void setHeight(int height){
		this.height=height;
	}
	public int getHeight(){
		return height;
	}
}
public class ShapeMain{
	
	public static void main(String args[]){
	
	Shape shape=new Shape();
	shape.setWidth(15);
	shape.setHeight(10);
	
	System.out.println("Width * Height : "+shape.getWidth()*shape.getHeight());
	}
}


2) Define a class "MyClass" and make sure clients can instantiate it , 
a) without any argument
b) with one int argument
c) with two int arguments
---------------------------------------------------------------------------------------
class MyClass{
	int id;
	int roll;
	
	MyClass(){ System.out.println("Withot Any Argumenst"); }
	MyClass(int id) { System.out.println("With One Argumnet"); this.id=id; }
	MyClass(int id,int roll){ System.out.println("With two argumnents"); this.id=id; this.roll=roll; }
	
}
public class MyMain{
	public static void main(String args[]){
		
	MyClass cls0 = new MyClass();
	MyClass cls1 = new MyClass(1);
	MyClass cls2 = new MyClass(1,12);

	}
}

---------------------------------------------------------------------------------------
3) Define a class "Emp" with private static member "int cnt".
How will u make sure that outsiders can read the value of cnt ?

class Emp{
	private static int cnt=50;
	
	public static int getCNT(){
		return ++cnt;
	}
	
}
public class MyMain{
	public static void main(String args[]){
	for(int i=0;i<10;i++){	
		System.out.println("Count is : "+Emp.getCNT());
	}
	}
}

---------------------------------------------------------------------------------------
4) Define a class "DemoOb". 
create an instance of it.
now create a reference and assign the reference created in the above statement.
	Discuss what happens?
Now since u have 2 references, take one of the reference and assign a new instance of the class.
	Discuss what happens?
(For ur discussion, write necessary comments in the program)

//Creating one class DemoOb
class DemoOb{
	DemoOb(){ System.out.println("Object Is Created"); }
}
//Creating Demo class for Main Method
public class Demo{
	public static void main(String args[]){
		//Creating object of DemoOb
		DemoOb d1=new DemoOb();
		//Assigning object of DemoOb d1 to new refence varibale d2 
		DemoOb d2=d1;
		// Creating new object of DemoOb into d1 refrence
		d1=new DemoOb();
	}
}
---------------------------------------------------------------------------------------
5) Define 3 classes A , B and C
in all these classes create static and nonstatic variables as well as methods.
	Now Define a class "Demo" ,in which define "main" function. From this main function try to access all the members of A ,B  and C.

class A{
	int id;
	static String classType="A";
	public String disp(){	return " id : "+id+" | ClassType : "+classType+" | "; }
}
class B{
	int id;
	static String classType="B";
	public String disp(){	return " id : "+id+" | ClassType : "+classType+" | "; }
}
class C{
	int id;
	static String classType="C";
	public String disp(){	return " id : "+id+" | ClassType : "+classType+" | "; }
}

public class Demo{
	public static void main(String args[]){
		A a = new A(); a.id=10;
		B b = new B(); b.id=20;
		C c = new C(); c.id=30;

		System.out.println(a.disp());
		System.out.println(b.disp());
		System.out.println(c.disp());
	}
}

----------------------------------------------------------------------------------------
6) define static initializers in the above A,B and C classes and check the order of their execution.

class C{
	int id;
	static String classType;
	static{ classType="C"; System.out.println("->C");}
	public String disp(){	return " id : "+id+" | ClassType : "+classType+" | "; }
}

class B{
	int id;
	static String classType;
	static{ classType="B"; System.out.println("->B"); }
	public String disp(){	return " id : "+id+" | ClassType : "+classType+" | "; }
}
class A{
	int id;
	static String classType;
	static{ classType="A"; System.out.println("->A"); }
	public String disp(){	return " id : "+id+" | ClassType : "+classType+" | "; }
}
public class ShapeMain{
	public static void main(String args[]){
		A a = new A(); a.id=10;
		B b = new B(); b.id=20;
		C c = new C(); c.id=30;

		System.out.println(a.disp());
		System.out.println(b.disp());
		System.out.println(c.disp());
	}
}



















	
